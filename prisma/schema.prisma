// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

// --- CORE APPLICATION MODELS ---

model WaitingList {
  email     String
  createdAt DateTime @default(now())
  id        String   @id @default(uuid()) @db.Uuid

  @@schema("public")
}

model user {
  id                      String              @id @unique @db.Uuid
  email                   String?
  name                    String?
  car                     Car[]
  chargerAvailabilty      ChargerAvailability[]
  chargerspot             ChargerSpot[]
  host                    Host?
  bankAccount             HostBankAccount[]
  reservations            Reservation[]
  favourite               favourite?
  chargingSessions        ChargingSession[]
  Orders                  Order[]
  users                   auth_users          @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)   //diff MVP
  role                    Role                @default(USER)

  // Location and notification preferences
  homeAddress             String?
  homeLatitude            Float?
  homeLongitude           Float?
  preferredAreas          Json?                // Array of {latitude, longitude, radius, name}
  notificationRadius      Float?               @default(0.5) // Default 0.5km radius
  notificationPreferences Json?                // {email: boolean, push: boolean, newChargers: boolean, updates: boolean}
  notifications           Notification[]

  @@schema("public")
}

model Bank {
  id         String @id @default(uuid()) @db.Uuid
  Bank       Float
  CABalance  Float
  TBPBalance Float
  TResv      Float

  @@schema("public")
}

model Host {
  id                  String              @id @default(uuid()) @db.Uuid
  userId              String              @unique @db.Uuid
  chargerAvailability ChargerAvailability[]
  chargerSpot         ChargerSpot[]
  user                user                @relation(fields: [userId], references: [id])
  bankAccount         HostBankAccount[]
  moneyBalances       MoneyBalance?

  @@schema("public")
}

model favourite {
  id          String   @id @db.Uuid
  chargerSpotId String[] @db.Uuid
  userId      String   @unique @db.Uuid
  user        user     @relation(fields: [userId], references: [id])

  @@schema("public")
}

model ChargingSession {
  id             String      @id @default(uuid()) @db.Uuid
  chargePointId  String?     // OCPP charge point identifier
  userId         String?     @db.Uuid
  reservationId  String?     @unique @db.Uuid
  startTime      DateTime?
  endTime        DateTime?
  energyConsumed Float?      @default(0)
  status         String?     // "Started", "InProgress", "Completed", "Cancelled"
  transactionId  Int?        // OCPP transaction ID
  currentPower   Float?      // Current power in kW
  meterStart     Int?
  meterStop      Int?
  idTag          String?     // OCPP idTag
  transactionIdOcpp   Int?  @unique
  errorCode      String?     // OCPP error code if any
  connectorId    Int?        // OCPP connector ID
  createdAT      DateTime    @default(now())
  updatedAT      DateTime    @updatedAt
  chargerSpotId  String      @unique @db.Uuid

  // Relations
  user          user?        @relation(fields: [userId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  chargerSpot   ChargerSpot  @relation(fields: [chargerSpotId], references: [id])

  @@schema("public")
}

model ChargePoint {
  id            String    @id @default(uuid()) @db.Uuid
  chargePointId String    @unique // OCPP charge point identifier (e.g., "CP_001")
  
  status        String?   // "Available", "Preparing", "Charging", "SuspendedEV", "SuspendedEVSE", "Finishing", "Reserved", "Unavailable", "Faulted", "Connected", "Disconnected"
  lastHeartbeat DateTime?
  currentPower  Float?    // Current power in kW
  currentEnergy Float?    // Current energy in kWh
  errorCode     String?   // OCPP error code if any
  connectorId   Int?      // OCPP connector ID
  lastSeen      DateTime? // Last time any communication was received
  
  createdAT     DateTime? @default(now())
  updatedAT     DateTime? @default(now()) @updatedAt
  chargerSpotId String    @unique @db.Uuid
  chargerSpot   ChargerSpot? @relation(fields: [chargerSpotId], references: [id])

  @@schema("public")
}

model ChargerSpot {
  instructions    String
  chargingSpeed   Int
  available       Boolean             @default(true)
  address         String
  latitude        Float
  longitude       Float
  Review          Int                 @default(0)
  createdAT       DateTime            @default(now())
  imageUrls       String[]
  like            Boolean             @default(false)
  plugetype       String
  updatedAT       DateTime            @default(now()) @updatedAt
  status          String              @default("pending") // "pending", "approved", "rejected"
  id              String              @id @default(uuid()) @db.Uuid
  hostId          String              @db.Uuid
  userId          String              @db.Uuid
  availability    ChargerAvailability[]
  host            Host                @relation(fields: [hostId], references: [id])
  user            user                @relation(fields: [userId], references: [id])
  reservations    Reservation[]
  chargingSessions ChargingSession[]
  chargerpoint      ChargePoint?

  @@index([userId], map: "ChargerSpots.userId")
  @@schema("public")
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  description String?
  spec        String?
  kw          String?
  imageUrls   String[]
  price       Float
  cableLength Int?
  sku         String      @unique

  orderItems  OrderItem[]

  @@schema("public")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String?     @db.Uuid
  email       String
  firstName   String
  lastName    String
  address     String
  city        String
  province    String
  country     String
  zip         String
  unit        Int?
  subtotal    Float?
  taxAmount   Float?
  totalAmount Float?
  createdAt   DateTime    @default(now())
  user        user?       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]

  @@schema("public")
}

model OrderItem {
  id            String  @id @default(uuid()) @db.Uuid
  orderId       String  @db.Uuid
  productId     String  @db.Uuid
  quantity      Int
  priceAtPurchase Float
  discountAmount Float?

  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
  @@schema("public")
}

model ChargerAvailability {
  id            String      @id @default(uuid()) @db.Uuid
  chargerSpotId String      @db.Uuid
  hostId        String      @db.Uuid
  userId        String      @db.Uuid
  date          String?
  startTime     DateTime
  endTime       DateTime
  chargerSpot   ChargerSpot @relation(fields: [chargerSpotId], references: [id])
  host          Host        @relation(fields: [hostId], references: [id])
  user          user        @relation(fields: [userId], references: [id])

  @@schema("public")
}

model Car {
  licensePlate String
  createdAT    DateTime    @default(now())
  make         String
  model        String
  trim         String
  updatedAT    DateTime    @default(now()) @updatedAt
  year         Int
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @db.Uuid
  user         user        @relation(fields: [userId], references: [id])
  reservations Reservation[]

  @@schema("public")
}

model Reservation {
  startTimestamp  DateTime        @db.Timestamptz
  endTimestamp    DateTime        @db.Timestamptz
  paymentStatus   String
  email           String?
  energyConsumed  Float
  cancellation    Boolean         @default(false)
  status          Boolean         @default(true)
  chargerSpotId   String          @db.Uuid
  id              String          @id @default(uuid()) @db.Uuid
  userId          String?         @db.Uuid
  createdAT       DateTime        @default(now())
  updatedAT       DateTime        @default(now()) @updatedAt
  chargerSpot     ChargerSpot     @relation(fields: [chargerSpotId], references: [id])
  user            user?           @relation(fields: [userId], references: [id])
  paymentIntentId String?
  subtotal        Float?
  taxAmount       Float?
  totalAmount     Float?
  carId           String?         @db.Uuid
  car             Car?            @relation(fields: [carId], references: [id])
  chargingSession ChargingSession?

  @@schema("public")
}

model MoneyBalance {
  balanceAmount Float
  id            String @id @default(uuid()) @db.Uuid
  hostId        String @unique @db.Uuid
  host          Host   @relation(fields: [hostId], references: [id])

  @@schema("public")
}

model HostBankAccount {
  id                String @id @default(uuid()) @db.Uuid
  hostId            String @db.Uuid
  email             String
  userId            String @db.Uuid
  branchNumber      String
  transactionNumber String
  accountNumber     String
  host              Host   @relation(fields: [hostId], references: [id])
  user              user   @relation(fields: [userId], references: [id])

  @@schema("public")
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  title     String
  body      String
  type      String    // e.g., 'NEW_CHARGER', 'UPDATE', etc.
  read      Boolean   @default(false)
  data      Json?     // Additional data specific to the notification type
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      user      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([read])
  @@schema("public")
}

model OcppLog {
  id              String    @id @default(uuid()) @db.Uuid
  chargePointId   String?   // The OCPP chargePointId string, not a UUID foreign key
  level           String    // "info", "warn", "error", "debug"
  message         String    // A human-readable message
  ocppMethod      String?   // For OCPP messages: e.g., "BootNotification", "RemoteStartTransaction"
  ocppMessageType String?   // For OCPP messages: "Call", "CallResult", "CallError", "Event", "Validation", "Job", "Server", "Queue"
  payload         Json?     // The JSON payload of the OCPP message or relevant data
  direction       String?   // "Inbound", "Outbound", "Server", "Queue"
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)

  @@index([chargePointId])
  @@index([createdAt(sort: Desc)])
  @@index([level])
  @@schema("public")
}

// --- AUTH SCHEMA MODELS ---

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model flow_state {
  id                    String                @id @db.Uuid
  user_id               String?               @db.Uuid
  auth_code             String
  code_challenge_method code_challenge_method
  code_challenge        String
  provider_type         String
  provider_access_token String?
  provider_refresh_token String?
  created_at            DateTime?             @db.Timestamptz(6)
  updated_at            DateTime?             @db.Timestamptz(6)
  authentication_method String
  auth_code_issued_at   DateTime?             @db.Timestamptz(6)
  saml_relay_states     saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?
  id              String    @id @default(uuid()) @db.Uuid
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id          String    @id @db.Uuid
  uuid        String?   @db.Uuid
  raw_base_config String?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String     @db.Uuid
  created_at            DateTime   @db.Timestamptz(6)
  updated_at            DateTime   @db.Timestamptz(6)
  authentication_method String
  id                    String     @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id                    String        @id @db.Uuid
  factor_id             String        @db.Uuid
  created_at            DateTime      @db.Timestamptz(6)
  verified_at           DateTime?     @db.Timestamptz(6)
  ip_address            String        @db.Inet
  otp_code              String?
  web_authn_session_data Json?
  mfa_factors           mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

model mfa_factors {
  id                 String          @id @db.Uuid
  user_id            String          @db.Uuid
  friendly_name      String?
  factor_type        factor_type
  status             factor_status
  created_at         DateTime        @db.Timestamptz(6)
  updated_at         DateTime        @db.Timestamptz(6)
  secret             String?
  phone              String?
  last_challenged_at DateTime?       @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid   String?         @db.Uuid
  mfa_challenges     mfa_challenges[]
  users              auth_users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

model one_time_tokens {
  id         String            @id @db.Uuid
  user_id    String            @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime          @default(now()) @db.Timestamp(6)
  updated_at DateTime          @default(now()) @db.Timestamp(6)
  users      auth_users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

model saml_providers {
  id                String          @id @db.Uuid
  sso_provider_id   String          @db.Uuid
  entity_id         String          @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?       @db.Timestamptz(6)
  updated_at        DateTime?       @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @unique(map: "schema_migrations_version_idx") @db.VarChar(14)

  @@schema("auth")
}

model sessions {
  id             String         @id @db.Uuid
  user_id        String         @db.Uuid
  created_at     DateTime?      @db.Timestamptz(6)
  updated_at     DateTime?      @db.Timestamptz(6)
  factor_id      String?        @db.Uuid
  aal            aal_level?
  not_after      DateTime?      @db.Timestamptz(6)
  refreshed_at   DateTime?      @db.Timestamp(6)
  user_agent     String?
  ip             String?        @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String          @id @db.Uuid
  resource_id       String?
  created_at        DateTime?       @db.Timestamptz(6)
  updated_at        DateTime?       @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model auth_users {
  instance_id                String?             @db.Uuid
  id                         String              @id @db.Uuid
  aud                        String?             @db.VarChar(255)
  role                       String?             @db.VarChar(255)
  email                      String?             @db.VarChar(255)
  encrypted_password         String?             @db.VarChar(255)
  email_confirmed_at         DateTime?           @db.Timestamptz(6)
  invited_at                 DateTime?           @db.Timestamptz(6)
  confirmation_token         String?             @db.VarChar(255)
  confirmation_sent_at       DateTime?           @db.Timestamptz(6)
  recovery_token             String?             @db.VarChar(255)
  recovery_sent_at           DateTime?           @db.Timestamptz(6)
  email_change_token_new     String?             @db.VarChar(255)
  email_change               String?             @db.VarChar(255)
  email_change_sent_at       DateTime?           @db.Timestamptz(6)
  last_sign_in_at            DateTime?           @db.Timestamptz(6)
  raw_app_meta_data          Json?
  raw_user_meta_data         Json?
  is_super_admin             Boolean?
  created_at                 DateTime?           @db.Timestamptz(6)
  updated_at                 DateTime?           @db.Timestamptz(6)
  phone                      String?             @unique
  phone_confirmed_at         DateTime?           @db.Timestamptz(6)
  phone_change               String?             @default("")
  phone_change_token         String?             @default("") @db.VarChar(255)
  phone_change_sent_at       DateTime?           @db.Timestamptz(6)
  confirmed_at               DateTime?           @db.Timestamptz(6)
  email_change_token_current String?             @default("") @db.VarChar(255)
  email_change_confirm_status Int?               @default(0) @db.SmallInt
  banned_until               DateTime?           @db.Timestamptz(6)
  reauthentication_token     String?             @default("") @db.VarChar(255)
  reauthentication_sent_at   DateTime?           @db.Timestamptz(6)
  is_sso_user                Boolean             @default(false)
  deleted_at                 DateTime?           @db.Timestamptz(6)
  is_anonymous               Boolean             @default(false)
  identities                 identities[]
  mfa_factors                mfa_factors[]
  one_time_tokens            one_time_tokens[]
  sessions                   sessions[]
  user                       user? // Link to public.user profile

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

enum Role {
  USER
  ADMIN
  HOST

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
